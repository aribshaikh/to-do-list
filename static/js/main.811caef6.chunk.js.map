{"version":3,"sources":["ToDo.js","App.js","reportWebVitals.js","index.js"],"names":["TodosComponent","useState","currentTodo","setCurrentTodo","todo","isCompleted","todos","setTodos","className","value","onChange","e","target","onKeyPress","key","todosArray","push","createNewTodo","placeholder","map","index","onClick","completeTodo","splice","deleteTodo","length","App","ToDo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NA2EeA,MAxEf,WAA2B,IAAD,EACgBC,mBAAS,IADzB,mBACfC,EADe,KACFC,EADE,OAEIF,mBAAS,CAC/B,CACIG,KAAM,mBACNC,aAAa,GAEjB,CACID,KAAM,aACNC,aAAa,GAEjB,CACID,KAAM,iCACNC,aAAa,KAbC,mBAEfC,EAFe,KAERC,EAFQ,KAwC1B,OACQ,gCACE,uBACEC,UAAU,aACVC,MAAOP,EACPQ,SAAU,SAAAC,GACRR,EAAeQ,EAAEC,OAAOH,QAE1BI,WAAY,SAAAF,GACI,UAAVA,EAAEG,OA/BhB,SAAuBZ,GACnB,IAAIa,EAAU,YAAOT,GACrBS,EAAWC,KAAK,CACdZ,KAAMF,EACNG,aAAa,IAEfE,EAASQ,GA0BDE,CAAcf,GACdC,EAAe,MAGnBe,YAAY,4BAEbZ,EAAMa,KAAI,SAACf,EAAMgB,GAAP,OACT,sBAAgBZ,UAAU,OAA1B,UACE,qBAAKA,UAAU,WAAWa,QAAS,kBA/B7C,SAAsBD,GAClB,IAAIL,EAAU,YAAOT,GACrBS,EAAWK,GAAOf,aAAeU,EAAWK,GAAOf,YACvDE,EAASQ,GA4B0CO,CAAaF,IAAtD,SACGhB,EAAKC,aAAe,4CAEvB,qBAAKG,UAAWJ,EAAKC,YAAc,OAAS,GAA5C,SAAiDD,EAAKA,OACtD,qBAAKI,UAAU,SAASa,QAAS,kBA7B3C,SAAoBD,GAChB,IAAIL,EAAU,YAAOT,GACrBS,EAAWQ,OAAOH,EAAO,GACzBb,EAASQ,GA0BoCS,CAAWJ,IAAlD,4BALQhB,MAUXE,EAAMmB,OAAS,GAAf,UAAuBnB,EAAMmB,OAA7B,c,MC3DIC,MARf,WACE,OACE,qBAAKlB,UAAU,MAAf,SACE,cAACmB,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.811caef6.chunk.js","sourcesContent":["import React, {useState} from \"react\";\n//Add local storage functionalities\n//Adjusted local storage functionalities\nfunction TodosComponent() {\n    const [currentTodo, setCurrentTodo] = useState(\"\");\n    const [todos, setTodos] = useState([\n        {\n            todo: \"CSC 209 Homework\",\n            isCompleted: true\n        },\n        {\n            todo: \"B42 Review\",\n            isCompleted: false\n        },\n        {\n            todo: \"Contribute for Data/ML Project\",\n            isCompleted: false\n        }\n        \n    ]);\n\n    function createNewTodo(currentTodo) {\n        let todosArray = [...todos];\n        todosArray.push({\n          todo: currentTodo,\n          isCompleted: false\n        });\n        setTodos(todosArray);\n      }\n    \n    function completeTodo(index) {\n        let todosArray = [...todos];\n        todosArray[index].isCompleted = !todosArray[index].isCompleted;\n    setTodos(todosArray);\n    }\n\n    function deleteTodo(index) {\n        let todosArray = [...todos];\n        todosArray.splice(index, 1);\n        setTodos(todosArray);\n    }\n\n\nreturn (\n        <div>\n          <input\n            className=\"todo-input\"\n            value={currentTodo}\n            onChange={e => {\n              setCurrentTodo(e.target.value);\n            }}\n            onKeyPress={e => {\n              if (e.key === \"Enter\") {\n                createNewTodo(currentTodo);\n                setCurrentTodo(\"\");\n              }\n            }}\n            placeholder=\"What needs to get done?\"\n          />\n          {todos.map((todo, index) => (\n            <div key={todo} className=\"todo\">\n              <div className=\"checkbox\" onClick={() => completeTodo(index)}>\n                {todo.isCompleted && <span>&#x2714;</span>}\n              </div>\n              <div className={todo.isCompleted ? \"done\" : \"\"}>{todo.todo}</div>\n              <div className=\"delete\" onClick={() => deleteTodo(index)}>\n                &#128465;\n              </div>\n            </div>\n          ))}\n          {todos.length > 0 && `${todos.length} items`}\n        </div>\n      );\n}\n\nexport default TodosComponent;","import ToDo from \"./ToDo\"\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDo/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}